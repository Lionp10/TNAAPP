@model TNA.APP.Models.ProfileViewModel

@{
    ViewData["Title"] = "Mi perfil";

    int roleId = 0;
    var roleClaim = User.FindFirst("roleid")?.Value;
    int.TryParse(roleClaim, out roleId);
    bool showMemberFields = (roleId == 3); 

    string currentImageSrc = Url.Content("~/images/avatar-placeholder.webp");
    var pi = Model.Member?.ProfileImage ?? string.Empty;
    if (!string.IsNullOrWhiteSpace(pi))
    {
        if (pi.StartsWith("~") || pi.StartsWith("/")) currentImageSrc = Url.Content(pi);
        else if (pi.StartsWith("http", StringComparison.OrdinalIgnoreCase)) currentImageSrc = pi;
        else currentImageSrc = Url.Action("Image", "Media", new { key = pi }) ?? Url.Content("~/images/avatar-placeholder.webp");
    }
}

<link rel="stylesheet" href="~/css/auth.css" />
<link rel="stylesheet" href="~/css/profile.css" />

@section Hero {
    <section class="auth-container">
        <div class="auth-background"></div>
        <div class="container mt-5">
            <form asp-action="Profile" method="post" enctype="multipart/form-data" novalidate>
                @Html.AntiForgeryToken()

                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="MemberId" />

                @if (showMemberFields && Model.Member != null)
                {
                    <input type="hidden" asp-for="Member.Id" />
                }

                <div class="auth-card">
                    <div class="auth-card-header d-flex justify-content-between align-items-center">
                        <h2 class="auth-title mb-0 d-flex align-items-center gap-2">
                            <i class="bi bi-person-circle me-2"></i> Perfil
                        </h2>
                    </div>

                    <div class="auth-card-body">
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success auth-alert">
                                <i class="bi bi-check-circle me-2"></i> @TempData["SuccessMessage"]
                            </div>
                        }
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger auth-alert">
                                <i class="bi bi-exclamation-triangle me-2"></i> @TempData["ErrorMessage"]
                            </div>
                        }

                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <div class="row gx-4">
                            <div class="col-lg-6">
                                <h5 class="mb-3">Datos personales</h5>

                                <div class="mb-3">
                                    <label asp-for="Nickname" class="form-label small text-muted"></label>
                                    <input asp-for="Nickname" class="form-control" />
                                    <span asp-validation-for="Nickname" class="text-danger small"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="Email" class="form-label small text-muted"></label>
                                    <input asp-for="Email" class="form-control" readonly />
                                    <span asp-validation-for="Email" class="text-danger small"></span>
                                </div>

                                @if (showMemberFields && Model.MemberId != null && Model.Member != null)
                                {
                                    <div class="row gx-2">
                                        <div class="col-md-6 mb-3">
                                            <label asp-for="Member.FirstName" class="form-label small text-muted">Nombre</label>
                                            <input asp-for="Member.FirstName" class="form-control" />
                                            <span asp-validation-for="Member.FirstName" class="text-danger small"></span>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <label asp-for="Member.LastName" class="form-label small text-muted">Apellido</label>
                                            <input asp-for="Member.LastName" class="form-control" />
                                            <span asp-validation-for="Member.LastName" class="text-danger small"></span>
                                        </div>
                                    </div>
                                }

                                <div class="mb-3">
                                    <label asp-for="Password" class="form-label small text-muted"></label>
                                    <div class="d-flex align-items-center gap-2">
                                        <input asp-for="Password" class="form-control" autocomplete="new-password" />
                                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="togglePassword(this)"><i class="bi bi-eye"></i></button>
                                    </div>
                                    <small class="form-text text-light">Dejar vacío para conservar la contraseña actual.</small>
                                    <span asp-validation-for="Password" class="text-danger small"></span>
                                </div>

                                <div class="mb-3">
                                    <label asp-for="ConfirmPassword" class="form-label small text-muted"></label>
                                    <input asp-for="ConfirmPassword" class="form-control" autocomplete="new-password" />
                                    <span asp-validation-for="ConfirmPassword" class="text-danger small"></span>
                                </div>
                            </div>

                            <div class="col-lg-6">
                                <h5 class="mb-3">Datos jugador</h5>

                                @if (showMemberFields && Model.MemberId != null)
                                {
                                    <div class="mb-3 d-flex align-items-center gap-3">

                                        <div style="width:56px;flex:0 0 56px;height:56px;position:relative;overflow:visible;">
                                            <img id="bodyAvatarPreview" src="@currentImageSrc" alt="Avatar" style="position:absolute;left:50%;top:50%;width:80px;height:80px;transform:translate(-50%,-50%);object-fit:cover;border-radius:8px;border:1px solid rgba(255,255,255,0.06);" />
                                        </div>
                                        <div class="flex-grow-1">
                                            <label class="form-label small text-muted d-block mb-1">Cambiar imagen de perfil</label>
                                            <div class="mb-1">
                                                <small class="form-text text-light">Subir una nueva imagen reemplazará la anterior.</small>
                                            </div>

                                            <label class="btn btn-danger btn-sm mb-0 w-100 text-truncate" id="btnSelectFileLabel" style="cursor:pointer; padding-top:0.45rem; padding-bottom:0.45rem;">
                                                <span id="btnSelectFileText">Seleccionar archivo</span>
                                                <input type="file" name="ProfileImageFile" accept="image/webp" id="inputProfileFile" style="display:none;" />
                                            </label>

                                            <div id="profileImageError" class="text-danger small mt-1 @(ViewData.ModelState.ContainsKey("ProfileImageFile") && ViewData.ModelState["ProfileImageFile"].Errors.Count>0 ? "" : "d-none")">
                                                @foreach (var err in (ViewData.ModelState.ContainsKey("ProfileImageFile") ? ViewData.ModelState["ProfileImageFile"].Errors : Enumerable.Empty<Microsoft.AspNetCore.Mvc.ModelBinding.ModelError>()))
                                                {
                                                    @err.ErrorMessage
                                                }
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label small text-muted">Nickname jugador</label>
                                        <input asp-for="Member.Nickname" class="form-control" readonly />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label small text-muted">PlayerId</label>
                                        <input asp-for="Member.PlayerId" class="form-control" readonly />
                                    </div>

                                    <div class="mt-4">
                                        <label class="form-label small text-muted">Redes sociales (máx. 5)</label>
                                        <div id="socialsList" class="mb-2">
                                            @if (Model.MemberSocialMedias != null && Model.MemberSocialMedias.Any())
                                            {
                                                for (int i = 0; i < Model.MemberSocialMedias.Count && i < 5; i++)
                                                {
                                                    <div class="d-flex gap-2 align-items-center mb-2 social-row" data-index="@i">
                                                        <input type="hidden" name="MemberSocialMedias[@i].Id" value="@Model.MemberSocialMedias[i].Id" />
                                                        <input type="hidden" name="MemberSocialMedias[@i].MemberId" value="@Model.Member.Id" />

                                                        <select name="MemberSocialMedias[@i].SocialMediaId" class="form-select" style="width:140px;">
                                                            @{
                                                                var opts = new Dictionary<string, string> {
                                                                                            { "ST","Steam"},{ "TW","Twitch"},{ "YT","YouTube"},
                                                                                            { "IG","Instagram"},{ "FB","Facebook"},{ "X","X"},
                                                                                            { "TK","Tiktok"},{ "RD","Reddit"},{ "SP","Snapchat"},{ "WS","WhatsApp" }
                                                                                            };
                                                                var sel = Model.MemberSocialMedias[i].SocialMediaId;
                                                            }
                                                            @foreach (var kv in opts)
                                                            {
                                                                <option value="@kv.Key" selected="@(kv.Key == sel ? "selected" : null)">@kv.Value</option>
                                                            }
                                                        </select>

                                                        <input type="url" name="MemberSocialMedias[@i].SocialMediaUrl" class="form-control" placeholder="https://..." value="@Model.MemberSocialMedias[i].SocialMediaUrl" />

                                                        <button type="button" class="btn btn-outline-danger btn-sm btn-remove" title="Eliminar">×</button>
                                                    </div>
                                                }
                                            }
                                        </div>

                                        <div class="align-items-center">
                                            <button type="button" id="btnAddSocial" class="btn btn-sm btn-secondary form-control">Agregar red social</button>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-light small">No tienes permiso para ver/editar los datos de jugador.</div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="auth-card-footer text-end mt-3">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </div>
            </form>
        </div>
    </section>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function togglePassword(button) {
            const input = button.previousElementSibling;
            const icon = button.querySelector('i');
            if (!input) return;
            if (input.type === 'password') { input.type = 'text'; icon.className = 'bi bi-eye-slash'; }
            else { input.type = 'password'; icon.className = 'bi bi-eye'; }
        }

        (function () {
            const fileInput = document.getElementById('inputProfileFile');
            const bodyPreview = document.getElementById('bodyAvatarPreview');
            const label = document.getElementById('btnSelectFileLabel');
            const labelText = document.getElementById('btnSelectFileText');
            const errorEl = document.getElementById('profileImageError');

            function showError(msg) {
                if (errorEl) {
                    errorEl.textContent = msg;
                    errorEl.classList.remove('d-none');
                } else {
                    alert(msg);
                }
            }

            function clearError() {
                if (errorEl) {
                    errorEl.textContent = '';
                    errorEl.classList.add('d-none');
                }
            }

            if (fileInput) {
                fileInput.addEventListener('change', function (e) {
                    clearError();
                    const f = fileInput.files && fileInput.files[0];
                    if (!f) return;
                    const name = f.name || '';
                    const ext = name.split('.').pop()?.toLowerCase() || '';
                    const ct = f.type || '';
                    if (ext !== 'webp' && ct !== 'image/webp') {
                        showError('Solo se permiten imágenes en formato .webp.');
                        fileInput.value = '';
                        return;
                    }
                    const reader = new FileReader();
                    reader.onload = function (ev) {
                        const src = ev.target.result;
                        if (bodyPreview) bodyPreview.src = src;

                        if (labelText) labelText.textContent = 'Archivo: ' + (name.length > 18 ? name.slice(0, 15) + '…' : name);
                    };
                    reader.readAsDataURL(f);
                });
            }

            const maxSocials = 5;
            const allowed = { ST: 'Steam', TW: 'Twitch', YT: 'YouTube', IG: 'Instagram', FB: 'Facebook', X: 'X', TK: 'Tiktok', RD: 'Reddit', SP: 'Snapchat', WS: 'WhatsApp' };

            function countRows() { return document.querySelectorAll('#socialsList .social-row').length; }
            function getUsedTypes() { return Array.from(document.querySelectorAll('#socialsList select')).map(s => s.value).filter(v => v); }

            function createSelect(selected) {
                const select = document.createElement('select');
                select.className = 'form-select';
                select.style.width = '140px';
                for (const k in allowed) {
                    const opt = document.createElement('option');
                    opt.value = k;
                    opt.textContent = allowed[k];
                    if (k === selected) opt.selected = true;
                    select.appendChild(opt);
                }
                return select;
            }

            function buildRow(index, id, memberId, type, url) {
                const container = document.createElement('div');
                container.className = 'd-flex gap-2 align-items-center mb-2 social-row';
                container.dataset.index = index;

                const hidId = document.createElement('input'); hidId.type = 'hidden'; hidId.name = `MemberSocialMedias[${index}].Id`; hidId.value = id || '0'; container.appendChild(hidId);
                const hidMid = document.createElement('input'); hidMid.type = 'hidden'; hidMid.name = `MemberSocialMedias[${index}].MemberId`; hidMid.value = memberId || ''; container.appendChild(hidMid);

                const select = createSelect(type); select.name = `MemberSocialMedias[${index}].SocialMediaId`; container.appendChild(select);

                const input = document.createElement('input'); input.type = 'url'; input.name = `MemberSocialMedias[${index}].SocialMediaUrl`; input.className = 'form-control'; input.placeholder = 'https://...'; input.value = url || ''; container.appendChild(input);

                const btn = document.createElement('button'); btn.type = 'button'; btn.className = 'btn btn-outline-danger btn-sm btn-remove'; btn.textContent = '×';
                btn.addEventListener('click', () => { container.remove(); rebuildIndexes(); });
                container.appendChild(btn);

                return container;
            }

            function rebuildIndexes() {
                const rows = document.querySelectorAll('#socialsList .social-row');
                rows.forEach((row, i) => {
                    row.dataset.index = i;
                    const inputs = row.querySelectorAll('input, select');
                    inputs.forEach(el => {
                        if (!el.name) return;
                        const suffix = el.name.split('].')[1];
                        el.name = `MemberSocialMedias[${i}].${suffix}`;
                    });
                });
            }

            document.getElementById('btnAddSocial')?.addEventListener('click', function () {
                if (countRows() >= maxSocials) { alert('Máximo 5 redes.'); return; }
                const used = getUsedTypes();
                const remaining = Object.keys(allowed).filter(k => !used.includes(k));
                const type = remaining.length ? remaining[0] : Object.keys(allowed)[0];
                const idx = countRows();
                const memberId = document.querySelector('input[name="Member.Id"]')?.value || document.querySelector('input[name="MemberId"]')?.value || '';
                const row = buildRow(idx, 0, memberId, type, '');
                document.getElementById('socialsList').appendChild(row);
                rebuildIndexes();
            });

            document.addEventListener('click', function (e) {
                if (e.target && e.target.classList.contains('btn-remove')) {
                    e.target.closest('.social-row')?.remove();
                    rebuildIndexes();
                }
            });

            document.addEventListener('change', function (e) {
                if (e.target && e.target.tagName === 'SELECT' && e.target.name.indexOf('MemberSocialMedias') >= 0) {
                    const vals = getUsedTypes();
                    const duplicates = vals.filter((v, i) => vals.indexOf(v) !== i);
                    if (duplicates.length) { alert('No se permiten tipos duplicados en redes sociales.'); e.target.value = ''; }
                }
            });

            rebuildIndexes();
        })();
    </script>
}
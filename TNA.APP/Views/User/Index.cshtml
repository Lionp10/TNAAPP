@model TNA.APP.Models.PagedListViewModel<TNA.BLL.DTOs.UserDTO>

@{
    ViewData["Title"] = "Usuarios";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";

    var successMsg = TempData["SuccessMessage"] as string;
    var errorMsg = TempData["ErrorMessage"] as string;
    var hasTempMsg = !string.IsNullOrEmpty(successMsg) || !string.IsNullOrEmpty(errorMsg);
    var isSuccess = !string.IsNullOrEmpty(successMsg);
    var tempMsg = isSuccess ? successMsg : errorMsg;
}

<style>
    .table-responsive { -webkit-overflow-scrolling: touch; }
    @@media (max-width: 768px) {
        .table-responsive .table thead { display: none; }
        .table-responsive .table, .table-responsive .table tbody, .table-responsive .table tr { display: block; width:100%; }
        .table-responsive .table tr { margin-bottom:.75rem; background: rgba(15,23,42,0.6); border-radius:8px; padding:.5rem; }
        .table-responsive .table td { display:flex; justify-content:space-between; align-items:center; padding:.5rem .65rem; border:none; width:100%; color:var(--text-secondary,#e2e8f0); background:transparent; }
        .table-responsive .table td::before { content: attr(data-label); font-weight:700; color:var(--text-muted,#94a3b8); margin-right:.75rem; min-width:95px; display:inline-block; text-transform:uppercase; font-size:.75rem; letter-spacing:.4px; }
        .table-responsive .table td.text-end, .table-responsive .table td:last-child { justify-content:flex-end; }
    }

    nav.pagination-wrap { margin-top: 1rem; }
    .pagination { gap:.375rem; }
    .pagination .page-link { border-radius:.5rem; padding:.28rem .5rem; min-width:34px; }
    .pagination .page-item.active .page-link { background: var(--bs-primary,#0d6efd); color:#fff; font-weight:700; box-shadow:0 6px 16px rgba(13,110,253,0.12); }
</style>

<section class="container mt-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <div>
            <h2 class="mb-0">Usuarios</h2>
            <small class="text-light">Listado y administración de usuarios</small>
        </div>
        <div>
            <a asp-action="Create" class="btn btn-accent">
                <i class="bi bi-person-plus"></i> Crear usuario
            </a>
        </div>
    </div>

    @if (hasTempMsg)
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">@tempMsg</div>
    }

    <div class="modal fade confirm-delete" id="confirmHardDeleteModal" tabindex="-1" aria-hidden="true" aria-labelledby="confirmHardDeleteLabel">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content glass-modal">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmHardDeleteLabel">Eliminar usuario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p id="confirmHardDeleteMessage">Esta acción eliminará el usuario permanentemente. ¿Desea continuar?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" id="btnConfirmHardDelete" class="btn btn-danger">Eliminar permanentemente</button>
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-borderless table-hover align-middle">
            <thead>
                <tr>
                    <th style="width:48px;">#</th>
                    <th>Nickname</th>
                    <th>Email</th>
                    <th style="width:110px;">Rol</th>
                    <th style="width:110px;">Miembro</th>
                    <th style="width:180px;">Creado</th>
                    <th style="width:100px;">Estado</th>
                    <th style="width:240px;" class="text-end">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Model?.Items == null || !Model.Items.Any())
                {
                    <tr><td colspan="8" class="text-center text-muted py-4">No hay usuarios para mostrar.</td></tr>
                }
                else
                {
                    var startIndex = (Model.Page - 1) * Model.PageSize + 1;
                    var idx = startIndex;
                    foreach (var user in Model.Items)
                    {
                        <tr>
                            <td class="fw-bold">@idx</td>
                            <td>@user.Nickname</td>
                            <td>@user.Email</td>
                            @{
                                var roleDesc = (user.RoleDescription ?? "").Trim();
                                string roleBadgeClass;
                                switch (roleDesc.ToLowerInvariant())
                                {
                                    case "administrator": roleBadgeClass = "bg-success"; break;
                                    case "moderator": roleBadgeClass = "bg-warning text-dark"; break;
                                    case "member": roleBadgeClass = "bg-primary"; break;
                                    case "user": roleBadgeClass = "bg-light text-dark"; break;
                                    default: roleBadgeClass = "bg-secondary"; break;
                                }
                            }
                            <td data-label="Rol"><span class="badge @roleBadgeClass">@($"{user.RoleId} - {(!string.IsNullOrEmpty(user.RoleDescription) ? user.RoleDescription : "-")}")</span></td>
                            <td data-label="Miembro">
                                @if (user.MemberId.HasValue) { <span class="badge bg-primary">@($"{user.MemberId} - {(!string.IsNullOrEmpty(user.MemberNickname) ? user.MemberNickname : "-")}")</span> }
                                else { <span class="badge bg-secondary">-</span> }
                            </td>
                            <td>@(user.CreatedAt.HasValue ? user.CreatedAt.Value.ToString("yyyy-MM-dd HH:mm") : "-")</td>

                            <td>
                                @if (user.Enabled)
                                {
                                    <span class="badge bg-success">Activo</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactivo</span>
                                }
                            </td>

                            <td class="text-end">
                                <a asp-action="Details" asp-route-id="@user.Id" class="btn btn-sm btn-light me-1" title="Detalles"><i class="bi bi-eye"></i></a>
                                <a asp-action="Edit" asp-route-id="@user.Id" class="btn btn-sm btn-primary text-white me-1" title="Editar"><i class="bi bi-pencil"></i></a>
                                <a asp-action="Delete" asp-route-id="@user.Id" class="btn btn-sm btn-warning text-white me-1" title="Deshabilitar"><i class="bi bi-person-x"></i></a>
                                <form asp-action="HardDelete" method="post" class="d-inline-block hard-delete-form">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@user.Id" />
                                    <button type="button" class="btn btn-sm btn-danger btn-hard-delete" title="Eliminar permanentemente" data-user="@user.Nickname"><i class="bi bi-trash"></i></button>
                                </form>
                            </td>
                        </tr>
                        idx++;
                    }
                }
            </tbody>
        </table>
    </div>

    @if (Model != null && Model.TotalPages > 1)
    {
        <nav aria-label="Paginación usuarios" class="pagination-wrap">
            <ul class="pagination justify-content-end pagination-sm">
                <li class="page-item @(Model.Page <= 1 ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(Model.Page - 1)">Anterior</a>
                </li>
                @for (var p = 1; p <= Model.TotalPages; p++)
                {
                    var active = p == Model.Page ? "active" : "";
                    <li class="page-item @active"><a class="page-link" asp-action="Index" asp-route-page="@p">@p</a></li>
                }
                <li class="page-item @(Model.Page >= Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(Model.Page + 1)">Siguiente</a>
                </li>
            </ul>
        </nav>
    }
</section>

@section Scripts {
    <script>
        (function() {
            document.addEventListener('DOMContentLoaded', function () {
                var currentForm = null;
                var confirmModalEl = document.getElementById('confirmHardDeleteModal');
                if (!confirmModalEl) return;
                var confirmModal = new bootstrap.Modal(confirmModalEl);
                var btnConfirm = document.getElementById('btnConfirmHardDelete');
                var messageEl = document.getElementById('confirmHardDeleteMessage');

                document.querySelectorAll('.btn-hard-delete').forEach(function (btn) {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        currentForm = btn.closest('form.hard-delete-form');
                        var nickname = btn.getAttribute('data-user') || 'este usuario';
                        if (messageEl) messageEl.textContent = 'Esta acción eliminará ' + nickname + ' permanentemente. ¿Desea continuar?';
                        confirmModal.show();
                    });
                });

                if (btnConfirm) {
                    btnConfirm.addEventListener('click', function () {
                        if (!currentForm) { confirmModal.hide(); return; }
                        try { currentForm.submit(); } catch (e) { console.error(e); }
                    });
                }
            });
        })();
    </script>
}

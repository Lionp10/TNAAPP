@model IEnumerable<TNA.BLL.DTOs.RecentGameStatsDTO>
@using System.Text.Json

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Estadísticas jugador";
    var playerId = (string?)ViewData["PlayerId"] ?? string.Empty;
    var playerNick = (string?)ViewData["PlayerNick"] ?? playerId;
    var recentList = (Model ?? Enumerable.Empty<TNA.BLL.DTOs.RecentGameStatsDTO>()).Take(20).ToList();
    var serverRecentGamesJson = JsonSerializer.Serialize(recentList, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });

    // Lifetime JSON provisto por el controlador (ya es texto JSON)
    var serverLifetimeJson = (string?)ViewData["LifetimeJson"] ?? string.Empty;

    // Para inyectarlo como objeto JS: si está vacío dejamos null, si no lo pasamos tal cual (JSON válido)
    var serverLifetimeJsonForJs = string.IsNullOrWhiteSpace(serverLifetimeJson) ? "null" : serverLifetimeJson;

    // Cálculos para la columna de estadísticas
    int matchesCount = recentList.Count;
    double avgPosition = 0;
    double avgAssists = 0;
    double avgDamage = 0;
    if (matchesCount > 0)
    {
        avgPosition = recentList.Where(r => r.WinPlace > 0).Any()
            ? recentList.Where(r => r.WinPlace > 0).Average(r => (double)r.WinPlace)
            : recentList.Average(r => (double)r.WinPlace);

        avgAssists = recentList.Average(r => (double)r.Assists);
        avgDamage = recentList.Average(r => (double)r.DamageDealt);
    }
}

<link href="~/css/lifetime-stats.css" rel="stylesheet" />

@section Hero {

    <section class="container mt-4">

        <!-- Player hero pill -->
        <div class="mb-4">
            <div class="p-3 bg-secondary bg-opacity-25 rounded d-flex align-items-center gap-3">
                <i class="bi bi-person-circle text-light fs-4"></i>
                <div class="text-light">
                    <small class="d-block text-muted-tna">Jugador:</small>
                    <strong class="fs-5">@playerNick</strong>
                </div>
            </div>
        </div>

        <!-- Main content row: chart + stats -->
        <div class="row">
            <div class="col-md-8">
                <div class="mt-2 p-3 bg-secondary bg-opacity-25 rounded">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <h6 class="mb-0 text-light"><i class="bi bi-graph-up me-2"></i>Tendencia de posición</h6>
                        <small class="text-light">Últimas 20</small>
                    </div>

                    <div id="recentGamesError" class="alert alert-danger d-none" role="alert"></div>
                    <div id="recentGamesSpinner" class="text-center py-3 d-none">
                        <div class="spinner-border text-info" role="status"><span class="visually-hidden">Cargando...</span></div>
                    </div>

                    <div class="position-relative">
                        <canvas id="positionChart" height="220"></canvas>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="mt-2 p-3 bg-secondary bg-opacity-25 rounded h-100 d-flex flex-column justify-content-center">
                    <h6 class="text-light mb-3">Estadísticas de las últimas @matchesCount partidas</h6>

                    <div class="d-flex align-items-center gap-3 py-3 border-bottom border-light border-opacity-10">
                        <div class="me-2 text-light fs-3"><i class="bi bi-flag"></i></div>
                        <div class="flex-grow-1">
                            <small class="text-muted-tna d-block">Posición promedio</small>
                            <div class="fw-bold text-warning fs-4">#@Math.Round(avgPosition)</div>
                        </div>
                    </div>

                    <div class="d-flex align-items-center gap-3 py-3 border-bottom border-light border-opacity-10">
                        <div class="me-2 text-light fs-3"><i class="bi bi-crosshair"></i></div>
                        <div class="flex-grow-1">
                            <small class="text-muted-tna d-block">Índice A/M</small>
                            <div class="fw-bold text-warning fs-4">@String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0.00}", avgAssists)</div>
                        </div>
                    </div>

                    <div class="d-flex align-items-center gap-3 py-3">
                        <div class="me-2 text-light fs-3"><i class="bi bi-lightning"></i></div>
                        <div class="flex-grow-1">
                            <small class="text-muted-tna d-block">Daño promedio</small>
                            <div class="fw-bold text-warning fs-4">@String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0.00}", avgDamage)</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sección de Lifetime Stats -->
        <div class="mt-5" id="lifetimeContent" style="display: none;">
            <div class="d-flex align-items-center gap-2 mb-4">
                <i class="bi bi-trophy-fill text-light fs-3"></i>
                <h3 class="mb-0 text-light fw-bold">Estadísticas Lifetime</h3>
            </div>
            
            <!-- Contenedor donde se inyectarán dinámicamente las tarjetas de modos -->
            <div id="modesContainer">
                <!-- Las tarjetas de FPP y TPP se generarán aquí via JavaScript -->
            </div>
        </div>
    </section>

    <!-- Modal para mostrar estadísticas de una partida -->
    <div class="modal fade modal-lg" id="gameStatsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header border-bottom-0">
                    <h5 class="modal-title" id="gameStatsModalTitle">Informe de la partida</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div id="gameStatsContent">
                        <!-- Se rellenará desde JS -->
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (function () {
            function formatDurationSecs(value) {
                if (value == null || value === '') return '00:00:00';
                var secs = Number(value);
                if (isNaN(secs) || !isFinite(secs)) return String(value);   
                var total = Math.floor(secs);
                var h = Math.floor(total / 3600);
                var m = Math.floor((total % 3600) / 60);
                var s = total % 60;
                return String(h).padStart(2, '0') + ':' + String(m).padStart(2, '0') + ':' + String(s).padStart(2, '0');
            }

            function formatDateOnly(s) {
                if (!s) return '';
                try {
                    var d = new Date(s);
                    if (isNaN(d.getTime())) return s;
                    return d.toLocaleDateString('es-ES');
                } catch (ex) {
                    return s;
                }
            }

            // Helpers seguros
            function el(id) { return document.getElementById(id); }
            function setDisplay(id, value) { var e = el(id); if (e) e.style.display = value; }
            function show(id) { setDisplay(id, ''); }
            function hide(id) { setDisplay(id, 'none'); }

            // Traduce matchType
            function translateMatchType(mt) {
                if (!mt) return '';
                mt = mt.toLowerCase();
                if (mt === 'official') return 'Normal';
                if (mt === 'competitive') return 'Ranked';
                if (mt === 'custom') return 'Custom';
                return mt.charAt(0).toUpperCase() + mt.slice(1);
            }

            // Traduce nombres de mapa
            function translateMapName(map) {
                if (!map) return map || '-';
                var m = map;
                switch (m) {
                    case 'Desert_Main': return 'Miramar';
                    case 'Erangel_Main': return 'Erangel';
                    case 'Savage_Main': return 'Sanhok';
                    case 'DihorOtok_Main': return 'Vikendi';
                    case 'Baltic_Main': return 'Erangel';
                    case 'Summerland_Main': return 'Karakin';
                    case 'Tiger_Main': return 'Taego';
                    case 'Chimera_Main': return 'Paramo';
                    case 'Heaven_Main': return 'Haven';
                    case 'Kiki_Main': return 'Deston';
                    case 'Neon_Main': return 'Rondo';
                    default: return map;
                }
            }

            // Datos provistos por el servidor (MVC)
            var serverItems = @Html.Raw(serverRecentGamesJson);
            // Inyección: serverLifetimeJsonForJs contiene null o un literal JSON; al usar Raw queda como objeto JS o null
            var serverLifetimeJson = @Html.Raw(serverLifetimeJsonForJs);

            var chartInstance = null;
            var chartItems = []; // guardará la lista ordenada usada en el gráfico
            var chartLabels = [];

            function renderModeCard(modeKey, data) {
                if (!data) {
                    return '<div class="col-12 col-md-4"><div class="glass-card p-4 text-center text-muted-tna">No hay datos para ' + modeKey + '.</div></div>';
                }

                var wins = data.wins ?? 0;
                var kills = data.kills ?? 0;
                var damage = data.damageDealt ?? 0;
                var rounds = data.roundsPlayed ?? 0;
                var timeSurvived = formatDurationSecs(data.timeSurvived ?? 0);
                var headshots = data.headshotKills ?? 0;
                var assists = data.assists ?? 0;
                var revives = data.revives ?? 0;
                var top10s = data.top10s ?? 0;

                var modeDisplayName = '';
                if (modeKey === 'solo') modeDisplayName = 'Solo TPP';
                else if (modeKey === 'duo') modeDisplayName = 'Duo TPP';
                else if (modeKey === 'squad') modeDisplayName = 'Squad TPP';
                else if (modeKey === 'solo-fpp') modeDisplayName = 'Solo FPP';
                else if (modeKey === 'duo-fpp') modeDisplayName = 'Duo FPP';
                else if (modeKey === 'squad-fpp') modeDisplayName = 'Squad FPP';

                var modeIcon = modeKey.includes('fpp') ? 'bi-eye' : 'bi-people';

                var html =
                    '<div class="col-12 col-md-4">' +
                    '<div class="glass-card p-4 h-100">' +
                    '<div class="d-flex align-items-center justify-content-between mb-3">' +
                    '<h6 class="mb-0 d-flex align-items-center gap-2 text-light">' +
                    '<i class="' + modeIcon + '"></i>' + modeDisplayName +
                    '</h6>' +
                    '<span class="badge bg-info text-light">' + rounds + ' partidas</span>' +
                    '</div>' +
                    '<div class="row g-3">' +
                    '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                    '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-trophy-fill text-info"></i><small class="text-light fw-bold">Victorias</small></div>' +
                    '<div class="fs-4 fw-bold text-light">' + wins + '</div></div></div>' +
                    '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                    '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-crosshair text-info"></i><small class="text-light fw-bold">Kills</small></div>' +
                    '<div class="fs-4 fw-bold text-light">' + kills + '</div></div></div>' +
                    '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                    '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-bullseye text-info"></i><small class="text-light fw-bold">Headshots</small></div>' +
                    '<div class="fs-4 fw-bold text-light">' + headshots + '</div></div></div>' +
                    '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                    '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-hand-thumbs-up text-info"></i><small class="text-light fw-bold">Asistencias</small></div>' +
                    '<div class="fs-4 fw-bold text-light">' + assists + '</div></div></div>' +
                    '</div>' +
                    '<div class="mt-3 pt-3 border-top border-secondary border-opacity-25">' +
                    '<div class="row g-2 small">' +
                    '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-heart-pulse text-info"></i><span class="text-white fw-bold">Revives:</span> <span class="text-light">' + revives + '</span></div>' +
                    '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-award text-info"></i><span class="text-white fw-bold">Top 10s:</span> <span class="text-light">' + top10s + '</span></div>' +
                    '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-lightning text-info"></i><span class="text-white fw-bold">Daño:</span> <span class="text-light">' + Number(damage).toLocaleString() + '</span></div>' +
                    '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-clock text-info"></i><span class="text-white fw-bold">Tiempo:</span> <span class="text-light">' + timeSurvived + '</span></div>' +
                    '</div></div>' +
                    '</div></div>';
                return html;
            }

            function renderModeCardsFromLifetime(lifetimeObj) {
                try {
                    if (!lifetimeObj) return;
                    var gm = lifetimeObj && lifetimeObj.data && lifetimeObj.data.attributes && lifetimeObj.data.attributes.gameModeStats
                        ? lifetimeObj.data.attributes.gameModeStats
                        : null;
                    if (!gm) return;

                    var html = '';
                    html += '<div class="mb-5">';
                    html += '<div class="d-flex align-items-center gap-2 mb-4">';
                    html += '<i class="bi bi-eye-fill text-light fs-4"></i>';
                    html += '<h4 class="mb-0 text-light fw-bold">FPP (Primera Persona)</h4>';
                    html += '</div>';
                    html += '<div class="row g-4">';
                    var fppModes = ['solo-fpp', 'duo-fpp', 'squad-fpp'];
                    fppModes.forEach(function (m) {
                        var entry = gm[m];
                        html += renderModeCard(m, entry);
                    });
                    html += '</div></div>';

                    html += '<div class="mb-3">';
                    html += '<div class="d-flex align-items-center gap-2 mb-4">';
                    html += '<i class="bi bi-people-fill text-light fs-4"></i>';
                    html += '<h4 class="mb-0 text-light fw-bold">TPP (Tercera Persona)</h4>';
                    html += '</div>';
                    html += '<div class="row g-4">';
                    var tppModes = ['solo', 'duo', 'squad'];
                    tppModes.forEach(function (m) {
                        var entry = gm[m];
                        html += renderModeCard(m, entry);
                    });
                    html += '</div></div>';

                    var container = el('modesContainer');
                    if (container) container.innerHTML = html;
                } catch (ex) {
                    console.error('Error parsing lifetime json', ex);
                }
            }

            function showGameModal(item, label) {
                try {
                    // Traducciones y valores seguros
                    var pos = item && (item.winPlace !== null && item.winPlace !== undefined) ? item.winPlace : '-';
                    var mapRaw = item && item.mapName ? item.mapName : '-';
                    var map = translateMapName(mapRaw);
                    var mt = item && item.matchType ? translateMatchType(item.matchType) : '';
                    var mode = item && item.gameMode ? item.gameMode : '-';
                    var createdRaw = item && item.createdAt ? item.createdAt : (item && item.dateOfUpdate ? item.dateOfUpdate : '');
                    var created = formatDateOnly(createdRaw);
                    var time = item && item.timeSurvived != null ? formatDurationSecs(item.timeSurvived) : '-';

                    // Stats principales
                    var kills = item && item.kills != null ? item.kills : 0;
                    var dbnos = item && item.dbnos != null ? item.dbnos : 0;
                    var assists = item && item.assists != null ? item.assists : 0;
                    var damage = item && item.damageDealt != null ? Number(item.damageDealt).toLocaleString() : '-';
                    var headshots = item && item.headshotsKills != null ? item.headshotsKills : 0;
                    var revives = item && item.revives != null ? item.revives : 0;

                    // Datos secundarios (agrupados)
                    var killStreaks = item && item.killStreaks != null ? item.killStreaks : 0;
                    var longestKill = item && item.longestKill != null ? (Number(item.longestKill).toFixed(2) + 'm') : '-';
                    var killPlace = item && item.killPlace != null ? item.killPlace : '-';
                    var roadKills = item && item.roadKills != null ? item.roadKills : 0;
                    var teamKills = item && item.teamKills != null ? item.teamKills : 0;

                    var rideDistance = item && item.rideDistance != null ? (Number(item.rideDistance).toFixed(0) + 'm') : '-';
                    var swimDistance = item && item.swimDistance != null ? (Number(item.swimDistance).toFixed(0) + 'm') : '-';
                    var walkDistance = item && item.walkDistance != null ? (Number(item.walkDistance).toFixed(0) + 'm') : '-';

                    var boots = item && item.boots != null ? item.boots : 0;
                    var heals = item && item.heals != null ? item.heals : 0;
                    var weaponsAcquired = item && item.weaponsAcquired != null ? item.weaponsAcquired : 0;
                    var vehicleDestroys = item && item.vehicleDestroys != null ? item.vehicleDestroys : 0;

                    // Construcción HTML: sección superior destacada
                    var html = '';
                    html += '<div class="mb-3">';
                    html += '<div class="d-flex align-items-center justify-content-between">';
                    html += '<div class="d-flex align-items-center gap-3">';
                    html += '<div class="text-warning fs-3 fw-bold">#' + pos + '</div>';
                    html += '<div>';
                    html += '<small class="text-muted-tna d-block">Mapa</small>';
                    html += '<div class="fw-bold text-white fs-5">' + map + '</div>';
                    html += '</div>';
                    html += '</div>';
                    html += '<div class="text-end">';

                    html += '<div class="fw-bold text-white">' + (mode ? mode.toUpperCase() : '-') + ' | ' + (mt ? mt.toUpperCase() : '-') + '</div>';
                    html += '<small class="text-muted-tna d-block mt-1"><span class="text-light">' + created + '</span></small>';
                    html += '<small class="text-muted-tna d-block"><span class="text-light">' + time + '</span></small>';
                    html += '</div>';
                    html += '</div>';
                    html += '</div>';

                    // Estadísticas principales en tarjetas con iconos
                    html += '<div class="row g-3 mb-3">';
                    html += '<div class="col-6 col-md-4"><div class="p-3 bg-dark bg-opacity-75 rounded text-center border border-secondary border-opacity-25">';
                    html += '<div class="d-flex justify-content-center align-items-center gap-2 mb-1"><i class="bi bi-crosshair text-info fs-5"></i><small class="text-muted-tna">Kills</small></div>';
                    html += '<div class="fs-3 fw-bold text-white">' + kills + '</div></div></div>';

                    html += '<div class="col-6 col-md-4"><div class="p-3 bg-dark bg-opacity-75 rounded text-center border border-secondary border-opacity-25">';
                    html += '<div class="d-flex justify-content-center align-items-center gap-2 mb-1"><i class="bi bi-person-fill text-info fs-5"></i><small class="text-muted-tna">Derribos</small></div>';
                    html += '<div class="fs-3 fw-bold text-white">' + dbnos + '</div></div></div>';

                    html += '<div class="col-6 col-md-4"><div class="p-3 bg-dark bg-opacity-75 rounded text-center border border-secondary border-opacity-25">';
                    html += '<div class="d-flex justify-content-center align-items-center gap-2 mb-1"><i class="bi bi-hand-thumbs-up text-info fs-5"></i><small class="text-muted-tna">Asistencias</small></div>';
                    html += '<div class="fs-3 fw-bold text-white">' + assists + '</div></div></div>';

                    html += '<div class="col-6 col-md-4"><div class="p-3 bg-dark bg-opacity-75 rounded text-center border border-secondary border-opacity-25">';
                    html += '<div class="d-flex justify-content-center align-items-center gap-2 mb-1"><i class="bi bi-lightning text-info fs-5"></i><small class="text-muted-tna">Daño</small></div>';
                    html += '<div class="fs-3 fw-bold text-white">' + damage + '</div></div></div>';

                    html += '<div class="col-6 col-md-4"><div class="p-3 bg-dark bg-opacity-75 rounded text-center border border-secondary border-opacity-25">';
                    html += '<div class="d-flex justify-content-center align-items-center gap-2 mb-1"><i class="bi bi-bullseye text-info fs-5"></i><small class="text-muted-tna">Headshots</small></div>';
                    html += '<div class="fs-3 fw-bold text-white">' + headshots + '</div></div></div>';

                    html += '<div class="col-6 col-md-4"><div class="p-3 bg-dark bg-opacity-75 rounded text-center border border-secondary border-opacity-25">';
                    html += '<div class="d-flex justify-content-center align-items-center gap-2 mb-1"><i class="bi bi-heart-pulse text-info fs-5"></i><small class="text-muted-tna">Reanimaciones</small></div>';
                    html += '<div class="fs-3 fw-bold text-white">' + revives + '</div></div></div>';
                    html += '</div>';

                    // Grupos secundarios: cuatro columnas lado a lado (Muertes | Despliegue | Salud | Otros)
                    html += '<div class="row mt-2 small text-light gy-2">';

                    // Muertes (col 1)
                    html += '<div class="col-6 col-md-3">';
                    html += '<h6 class="text-muted-tna">Muertes</h6>';
                    html += '<div class="lh-sm">';
                    html += '<div><strong>Racha:</strong> <span class="text-light">' + killStreaks + '</span></div>';
                    html += '<div><strong>Mayor dist.:</strong> <span class="text-light">' + longestKill + '</span></div>';
                    html += '<div><strong>Fuego amigo:</strong> <span class="text-light">' + teamKills + '</span></div>';
                    html += '<div><strong>Atropellos:</strong> <span class="text-light">' + roadKills + '</span></div>';
                    html += '<div><strong>KillPlace:</strong> <span class="text-light">' + killPlace + '</span></div>';
                    html += '</div>';
                    html += '</div>';

                    // Despliegue (col 2)
                    html += '<div class="col-6 col-md-3">';
                    html += '<h6 class="text-muted-tna">Despliegue</h6>';
                    html += '<div class="lh-sm">';
                    html += '<div><strong>A pie:</strong> <span class="text-light">' + walkDistance + '</span></div>';
                    html += '<div><strong>Vehículos:</strong> <span class="text-light">' + rideDistance + '</span></div>';
                    html += '<div><strong>Nadando:</strong> <span class="text-light">' + swimDistance + '</span></div>';
                    html += '</div>';
                    html += '</div>';

                    // Salud (col 3)
                    html += '<div class="col-6 col-md-3">';
                    html += '<h6 class="text-muted-tna">Salud</h6>';
                    html += '<div class="lh-sm">';
                    html += '<div><strong>Boosts:</strong> <span class="text-light">' + boots + '</span></div>';
                    html += '<div><strong>Curaciones:</strong> <span class="text-light">' + heals + '</span></div>';
                    html += '</div>';
                    html += '</div>';

                    // Otros (col 4)
                    html += '<div class="col-6 col-md-3">';
                    html += '<h6 class="text-muted-tna">Otros</h6>';
                    html += '<div class="lh-sm">';
                    html += '<div><strong>Armas:</strong> <span class="text-light">' + weaponsAcquired + '</span></div>';
                    html += '<div><strong>Vehículos destr.:</strong> <span class="text-light">' + vehicleDestroys + '</span></div>';
                    html += '</div>';
                    html += '</div>';

                    html += '</div>'; // end grupos secundarios

                    var contentEl = el('gameStatsContent');
                    if (contentEl) contentEl.innerHTML = html;

                    var modalEl = el('gameStatsModal');
                    if (modalEl) {
                        var bsModal = new bootstrap.Modal(modalEl, { keyboard: true });
                        bsModal.show();
                    }
                } catch (ex) {
                    console.error('Error mostrando modal', ex);
                }
            }

            function renderPositionChart(items) {
                var canvas = el('positionChart');
                if (!canvas) return;
                var ctx = canvas.getContext('2d');
                var ordered = (items || []).slice(0, 20).reverse();
                chartItems = ordered; // guardamos para usar en clicks
                var count = ordered.length;
                var labels = ordered.map(function (_, i) { return (count - i).toString(); });
                chartLabels = labels;

                var positions = ordered.map(function (it) {
                    return (it && (it.winPlace !== null && it.winPlace !== undefined)) ? Number(it.winPlace) : null;
                });

                var kills = ordered.map(function (it) { return it && it.kills != null ? it.kills : 0; });
                var times = ordered.map(function (it) { return it && it.timeSurvived != null ? it.timeSurvived : null; });

                var validPositions = positions.filter(function (v) { return v != null; });
                var maxPlace = validPositions.length ? Math.max.apply(null, validPositions) : 20;
                if (!isFinite(maxPlace) || maxPlace < 5) maxPlace = 20;
                var minY = 1;
                var maxY = Math.max(maxPlace, 5);

                // Configuración visual del punto (coincide con dataset)
                var pointRadius = 5;
                var pointBorderWidth = 2;
                var extraPad = Math.ceil(pointRadius + pointBorderWidth + 8); // margen extra para que no se corten los puntos

                if (chartInstance) { chartInstance.destroy(); chartInstance = null; }

                chartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Posición',
                            data: positions,
                            borderColor: 'rgba(200,200,185,0.95)',
                            borderWidth: 1.8,
                            backgroundColor: 'rgba(200,200,185,0.06)',
                            pointBackgroundColor: 'rgba(240,240,230,0.95)',
                            pointBorderColor: 'rgba(60,60,60,0.9)',
                            pointRadius: pointRadius,
                            pointBorderWidth: pointBorderWidth,
                            pointStyle: 'circle',
                            showLine: true,
                            tension: 0.32,
                            fill: false,
                            spanGaps: true,
                            clip: false // permite dibujar puntos fuera del area de trazado sin recortarlos
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        layout: {
                            padding: { top: extraPad, bottom: extraPad, left: 6, right: 6 }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                mode: 'nearest',
                                intersect: true,
                                callbacks: {
                                    title: function (tooltipItems) {
                                        var idx = tooltipItems[0].dataIndex;
                                        return 'Partida ' + (labels[idx]) + (idx === labels.length - 1 ? ' (Reciente)' : '');
                                    },
                                    label: function (context) {
                                        var idx = context.dataIndex;
                                        var pos = context.formattedValue;
                                        var k = kills[idx];
                                        var t = times[idx];
                                        var lines = [];
                                        lines.push('Posición: ' + (pos == null ? '-' : pos));
                                        lines.push('Kills: ' + (k != null ? k : 0));
                                        lines.push('Tiempo: ' + (t != null ? formatDurationSecs(t) : '-'));
                                        return lines;
                                    }
                                }
                            }
                        },
                        interaction: { mode: 'index', intersect: false },
                        scales: {
                            x: {
                                grid: { color: 'rgba(255,255,255,0.03)', borderColor: 'rgba(255,255,255,0.06)' },
                                ticks: { color: 'rgba(255,255,255,0.6)', maxRotation: 0, autoSkip: true, maxTicksLimit: 10 }
                            },
                            y: {
                                reverse: true,
                                min: minY,
                                max: maxY,
                                ticks: { stepSize: 1, color: 'rgba(255,255,255,0.6)' },
                                grid: { color: 'rgba(255,255,255,0.03)', borderColor: 'rgba(255,255,255,0.06)' }
                            }
                        }
                    }
                });

                // Click handler: abre modal con datos de la partida
                canvas.onclick = function (evt) {
                    if (!chartInstance) return;
                    var points = chartInstance.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);
                    if (points && points.length) {
                        var p = points[0];
                        var idx = p.index;
                        var item = chartItems[idx];
                        var label = labels[idx];
                        showGameModal(item, label);
                    }
                };
            }

            document.addEventListener('DOMContentLoaded', function () {
                // Lifetime: serverLifetimeJson is either null or an object (injected via Raw)
                if (serverLifetimeJson) {
                    // serverLifetimeJson already an object
                    renderModeCardsFromLifetime(serverLifetimeJson);
                    show('lifetimeContent');
                } else {
                    // fallback: request lifetime via endpoint if server didn't supply it
                    fetch('@Url.Action("PlayerLifetimeStats", "Stats")?playerId=' + encodeURIComponent('@playerId'), { method: 'GET' })
                        .then(function (r) { if (!r.ok) return r.text().then(t => { throw new Error(t || r.statusText); }); return r.json(); })
                        .then(function (resp) { if (resp) { renderModeCardsFromLifetime(resp); show('lifetimeContent'); } })
                        .catch(function (err) { console.error(err); });
                }

                // Render chart
                if (serverItems && serverItems.length > 0) {
                    renderPositionChart(serverItems);
                } else {
                    fetch('@Url.Action("PlayerRecentGames", "Stats")?playerId=' + encodeURIComponent('@playerId'), { method: 'GET' })
                        .then(function (r) { if (!r.ok) return r.text().then(t => { throw new Error(t || r.statusText); }); return r.json(); })
                        .then(function (resp) { renderPositionChart(resp || []); })
                        .catch(function (err) { console.error(err); });
                }
            });
        })();
    </script>
}
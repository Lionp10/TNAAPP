@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
    ViewData["Title"] = "Estadísticas jugador";
    var playerId = (string?)ViewData["PlayerId"] ?? string.Empty;
    var playerNick = (string?)ViewData["PlayerNick"] ?? playerId;
}

<link href="~/css/lifetime-stats.css" rel="stylesheet" />

<section class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="mb-0">Estadísticas — @playerNick</h2>
            <small class="text-light">Lifetime y modos</small>
        </div>
        <div>
            <a asp-controller="Home" asp-action="Members" class="btn btn-outline-light">Volver</a>
        </div>
    </div>

    <div id="lifetimeError" class="alert alert-danger d-none" role="alert"></div>

    <div id="lifetimeSpinner" class="text-center py-5">
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <div class="mt-2 text-muted">Cargando estadísticas...</div>
    </div>

    <div id="lifetimeContent" style="display:none;">
        <div class="mb-4 p-3 bg-secondary bg-opacity-25 rounded">
            <div class="d-flex align-items-center gap-2">
                <i class="bi bi-person-circle text-light fs-4"></i>
                <div>
                    <strong class="text-light fw-bold">Jugador:</strong>
                    <span id="lifetimePlayerName" class="fs-5">@playerNick</span>
                </div>
            </div>
        </div>

        <div id="modesContainer" class="row g-4"></div>
    </div>
</section>

@section Scripts {
<script>
    (function () {
        function formatDuration(value) {
            if (value == null || value === '') return '00:00:00';
            var secs = Number(value);
            if (isNaN(secs) || !isFinite(secs)) return String(value);
            var total = Math.floor(secs);
            var h = Math.floor(total / 3600);
            var m = Math.floor((total % 3600) / 60);
            var s = total % 60;
            return String(h).padStart(2, '0') + ':' + String(m).padStart(2, '0') + ':' + String(s).padStart(2, '0');
        }

        function renderModeCard(modeKey, data) {
            if (!data) {
                return '<div class="col-12 col-md-4"><div class="glass-card p-4 text-center text-muted">No hay datos para ' + modeKey + '.</div></div>';
            }

            var wins = data.wins ?? 0;
            var kills = data.kills ?? 0;
            var damage = data.damageDealt ?? 0;
            var rounds = data.roundsPlayed ?? 0;
            var timeSurvived = formatDuration(data.timeSurvived ?? 0);
            var headshots = data.headshotKills ?? 0;
            var assists = data.assists ?? 0;
            var revives = data.revives ?? 0;
            var top10s = data.top10s ?? 0;

            var modeDisplayName = '';
            if (modeKey === 'solo') modeDisplayName = 'Solo TPP';
            else if (modeKey === 'duo') modeDisplayName = 'Duo TPP';
            else if (modeKey === 'squad') modeDisplayName = 'Squad TPP';
            else if (modeKey === 'solo-fpp') modeDisplayName = 'Solo FPP';
            else if (modeKey === 'duo-fpp') modeDisplayName = 'Duo FPP';
            else if (modeKey === 'squad-fpp') modeDisplayName = 'Squad FPP';

            var modeIcon = modeKey.includes('fpp') ? 'bi-eye' : 'bi-people';

            var html =
                '<div class="col-12 col-md-4">' +
                '<div class="glass-card p-4 h-100">' +
                '<div class="d-flex align-items-center justify-content-between mb-3">' +
                '<h6 class="mb-0 d-flex align-items-center gap-2 text-light">' +
                '<i class="' + modeIcon + '"></i>' + modeDisplayName +
                '</h6>' +
                '<span class="badge bg-info text-light">' + rounds + ' partidas</span>' +
                '</div>' +
                '<div class="row g-3">' +
                '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-trophy-fill text-info"></i><small class="text-light fw-bold">Victorias</small></div>' +
                '<div class="fs-4 fw-bold text-light">' + wins + '</div></div></div>' +
                '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-crosshair text-info"></i><small class="text-light fw-bold">Kills</small></div>' +
                '<div class="fs-4 fw-bold text-light">' + kills + '</div></div></div>' +
                '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-bullseye text-info"></i><small class="text-light fw-bold">Headshots</small></div>' +
                '<div class="fs-4 fw-bold text-light">' + headshots + '</div></div></div>' +
                '<div class="col-6"><div class="stat-item bg-dark bg-opacity-75 p-3 rounded border border-secondary border-opacity-50">' +
                '<div class="d-flex align-items-center gap-2 mb-1"><i class="bi bi-hand-thumbs-up text-info"></i><small class="text-light fw-bold">Asistencias</small></div>' +
                '<div class="fs-4 fw-bold text-light">' + assists + '</div></div></div>' +
                '</div>' +
                '<div class="mt-3 pt-3 border-top border-secondary border-opacity-25">' +
                '<div class="row g-2 small">' +
                '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-heart-pulse text-info"></i><span class="text-white fw-bold">Revives:</span> <span class="text-light">' + revives + '</span></div>' +
                '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-award text-info"></i><span class="text-white fw-bold">Top 10s:</span> <span class="text-light">' + top10s + '</span></div>' +
                '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-lightning text-info"></i><span class="text-white fw-bold">Daño:</span> <span class="text-light">' + Number(damage).toLocaleString() + '</span></div>' +
                '<div class="col-6 d-flex align-items-center gap-2"><i class="bi bi-clock text-info"></i><span class="text-white fw-bold">Tiempo:</span> <span class="text-light">' + timeSurvived + '</span></div>' +
                '</div></div>' +
                '</div></div>';
            return html;
        }

        var playerId = '@playerId';

        function loadStats() {
            if (!playerId) {
                document.getElementById('lifetimeError').classList.remove('d-none');
                document.getElementById('lifetimeError').textContent = 'playerId no especificado.';
                document.getElementById('lifetimeSpinner').style.display = 'none';
                return;
            }

            document.getElementById('lifetimeError').classList.add('d-none');
            document.getElementById('lifetimeContent').style.display = 'none';
            document.getElementById('modesContainer').innerHTML = '';
            document.getElementById('lifetimeSpinner').style.display = '';

            fetch('@Url.Action("PlayerLifetimeStats", "Home")?playerId=' + encodeURIComponent(playerId), { method: 'GET' })
                .then(function (r) {
                    if (!r.ok) return r.text().then(t => { throw new Error(t || r.statusText); });
                    return r.json();
                })
                .then(function (resp) {
                    try {
                        var gm = resp && resp.data && resp.data.attributes && resp.data.attributes.gameModeStats ? resp.data.attributes.gameModeStats : null;
                        if (!gm) {
                            document.getElementById('lifetimeError').classList.remove('d-none');
                            document.getElementById('lifetimeError').textContent = 'No se encontraron estadísticas para este jugador.';
                            return;
                        }

                        var html = '';
                        html += '<div class="mb-5">';
                        html += '<div class="d-flex align-items-center gap-2 mb-4">';
                        html += '<i class="bi bi-eye-fill text-light fs-4"></i>';
                        html += '<h4 class="mb-0 text-light fw-bold">FPP (Primera Persona)</h4>';
                        html += '</div>';
                        html += '<div class="row g-4">';
                        var fppModes = ['solo-fpp', 'duo-fpp', 'squad-fpp'];
                        fppModes.forEach(function (m) {
                            var entry = gm[m];
                            html += renderModeCard(m, entry);
                        });
                        html += '</div></div>';

                        html += '<div class="mb-3">';
                        html += '<div class="d-flex align-items-center gap-2 mb-4">';
                        html += '<i class="bi bi-people-fill text-light fs-4"></i>';
                        html += '<h4 class="mb-0 text-light fw-bold">TPP (Tercera Persona)</h4>';
                        html += '</div>';
                        html += '<div class="row g-4">';
                        var tppModes = ['solo', 'duo', 'squad'];
                        tppModes.forEach(function (m) {
                            var entry = gm[m];
                            html += renderModeCard(m, entry);
                        });
                        html += '</div></div>';

                        document.getElementById('modesContainer').innerHTML = html;
                        document.getElementById('lifetimeContent').style.display = '';
                    } catch (ex) {
                        document.getElementById('lifetimeError').classList.remove('d-none');
                        document.getElementById('lifetimeError').textContent = 'Error procesando la respuesta.';
                        console.error(ex);
                    }
                })
                .catch(function (err) {
                    document.getElementById('lifetimeError').classList.remove('d-none');
                    document.getElementById('lifetimeError').textContent = 'Error al obtener datos: ' + (err.message || err);
                    console.error(err);
                })
                .finally(function () {
                    document.getElementById('lifetimeSpinner').style.display = 'none';
                });
        }

        // load on mount
        document.addEventListener('DOMContentLoaded', loadStats);
    })();
</script>
}
